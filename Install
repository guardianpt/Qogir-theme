#!/bin/bash

ROOT_UID=0
DEST_DIR=

# Destination directory
if [ "$UID" -eq "$ROOT_UID" ]; then
  DEST_DIR="/usr/share/themes"
else
  DEST_DIR="$HOME/.themes"
fi

SRC_DIR=$(cd $(dirname $0) && pwd)

THEME_NAME=Qogir_Mod
MENU_VARIANTS=('' '-gnome')
COLOR_VARIANTS=('' '-light' '-dark')

usage() {
  printf "%s\n" "Usage: $0 [OPTIONS...]"
  printf "\n%s\n" "OPTIONS:"
  printf "  %-25s%s\n" "-d, --dest DIR" "Specify theme destination directory (Default: ${DEST_DIR})"
  printf "  %-25s%s\n" "-n, --name NAME" "Specify theme name (Default: ${THEME_NAME})"
  printf "  %-25s%s\n" "-c, --color VARIANTS..." "Specify theme color variant(s) [standard|light|dark] (Default: All variants)"
  printf "  %-25s%s\n" "-m, --menu VARIANTS..." "Specify theme appmenu button variant(s) [standard|gnome] (Default: All variants)"
  printf "  %-25s%s\n" "-i, --image VARIANTS..." "Install theme with nautilus background image"
  printf "  %-25s%s\n" "-s, --square VARIANTS..." "Install theme with square titlebutton"
  printf "  %-25s%s\n" "-h, --help" "Show this help"
}

install() {
  local dest=${1}
  local name=${2}
  local menu=${3}
  local color=${4}

  [[ ${color} == '-dark' ]] && local ELSE_DARK=${color}
  [[ ${color} == '-light' ]] && local ELSE_LIGHT=${color}

  local THEME_DIR=${dest}/${name}${menu}${color}

  [[ -d ${THEME_DIR} ]] && rm -rf ${THEME_DIR}

  echo "Installing '${THEME_DIR}'..."

  mkdir -p                                                                           ${THEME_DIR}
  cp -ur ${SRC_DIR}/COPYING                                                          ${THEME_DIR}
  cp -ur ${SRC_DIR}/AUTHORS                                                          ${THEME_DIR}

  echo "[Desktop Entry]" >> ${THEME_DIR}/index.theme
  echo "Type=X-GNOME-Metatheme" >> ${THEME_DIR}/index.theme
  echo "Name=Qogir${menu}${color}" >> ${THEME_DIR}/index.theme
  echo "Comment=An Clean Gtk+ theme based on Flat Design" >> ${THEME_DIR}/index.theme
  echo "Encoding=UTF-8" >> ${THEME_DIR}/index.theme
  echo "" >> ${THEME_DIR}/index.theme
  echo "[X-GNOME-Metatheme]" >> ${THEME_DIR}/index.theme
  echo "GtkTheme=Qogir${menu}${color}" >> ${THEME_DIR}/index.theme
  echo "MetacityTheme=Qogir${menu}${color}" >> ${THEME_DIR}/index.theme
  echo "IconTheme=Adwaita" >> ${THEME_DIR}/index.theme
  echo "CursorTheme=Adwaita" >> ${THEME_DIR}/index.theme
  echo "ButtonLayout=menu:minimize,maximize,close" >> ${THEME_DIR}/index.theme

  mkdir -p                                                                           ${THEME_DIR}/gtk-2.0
  cp -ur ${SRC_DIR}/src/gtk-2.0/{apps.rc,panel.rc,main.rc,xfce-notify.rc}            ${THEME_DIR}/gtk-2.0
  cp -ur ${SRC_DIR}/src/gtk-2.0/assets${ELSE_DARK}                                   ${THEME_DIR}/gtk-2.0/assets
  cp -ur ${SRC_DIR}/src/gtk-2.0/gtkrc${color}                                        ${THEME_DIR}/gtk-2.0/gtkrc
  cp -ur ${SRC_DIR}/src/gtk-2.0/menubar-toolbar${color}.rc                           ${THEME_DIR}/gtk-2.0/menubar-toolbar.rc

  mkdir -p                                                                           ${THEME_DIR}/gtk-3.0
  cp -ur ${SRC_DIR}/src/gtk-3.0/assets                                               ${THEME_DIR}/gtk-3.0
  cp -ur ${SRC_DIR}/src/gtk-3.0/gtk${menu}${color}.css                               ${THEME_DIR}/gtk-3.0/gtk.css
  [[ ${color} != '-dark' ]] && \
  cp -ur ${SRC_DIR}/src/gtk-3.0/gtk${menu}-dark.css                                  ${THEME_DIR}/gtk-3.0/gtk-dark.css
  cp -ur ${SRC_DIR}/src/gtk-3.0/thumbnail${ELSE_DARK}.png                            ${THEME_DIR}/gtk-3.0/thumbnail.png

  mkdir -p                                                                           ${THEME_DIR}/gnome-shell
  cp -ur ${SRC_DIR}/src/gnome-shell/common-assets                                    ${THEME_DIR}/gnome-shell
  cp -ur ${SRC_DIR}/src/gnome-shell/assets${ELSE_DARK}                               ${THEME_DIR}/gnome-shell/assets
  cp -ur ${SRC_DIR}/src/gnome-shell/gnome-shell${color}.css                          ${THEME_DIR}/gnome-shell/gnome-shell.css

  mkdir -p                                                                           ${THEME_DIR}/cinnamon
  cp -ur ${SRC_DIR}/src/cinnamon/common-assets                                       ${THEME_DIR}/cinnamon
  cp -ur ${SRC_DIR}/src/cinnamon/assets${ELSE_DARK}                                  ${THEME_DIR}/cinnamon/assets
  cp -ur ${SRC_DIR}/src/cinnamon/cinnamon${ELSE_DARK}.css                            ${THEME_DIR}/cinnamon/cinnamon.css
  cp -ur ${SRC_DIR}/src/cinnamon/thumbnail${ELSE_DARK}.png                           ${THEME_DIR}/cinnamon/thumbnail.png

  mkdir -p                                                                           ${THEME_DIR}/metacity-1
  cp -ur ${SRC_DIR}/src/metacity-1/assets${ELSE_LIGHT}/*.png                         ${THEME_DIR}/metacity-1
  cp -ur ${SRC_DIR}/src/metacity-1/metacity-theme-3.xml                              ${THEME_DIR}/metacity-1
  cp -ur ${SRC_DIR}/src/metacity-1/metacity-theme-1${ELSE_LIGHT}.xml                 ${THEME_DIR}/metacity-1/metacity-theme-1.xml
  cp -ur ${SRC_DIR}/src/metacity-1/thumbnail${ELSE_LIGHT}.png                         ${THEME_DIR}/metacity-1/thumbnail.png
  cd ${THEME_DIR}/metacity-1
  ln -s metacity-theme-1.xml metacity-theme-2.xml

  mkdir -p                                                                           ${THEME_DIR}/xfwm4
  cp -ur ${SRC_DIR}/src/xfwm4/themerc${ELSE_LIGHT}                                   ${THEME_DIR}/xfwm4/themerc
  cp -ur ${SRC_DIR}/src/xfwm4/assets${ELSE_LIGHT}/*.png                              ${THEME_DIR}/xfwm4

  cp -ur ${SRC_DIR}/src/plank                                                        ${THEME_DIR}
}

TITLE_BUTTON_C="@extend %circle_titlebutton"
TITLE_BUTTON_S="@extend %square_titlebutton"

CSD_TITLE_BUTTON_C="@extend %csd_circle_titlebutton"
CSD_TITLE_BUTTON_S="@extend %csd_square_titlebutton"

ICON_PADDING_C="$icon_padding:6px;"
ICON_PADDING_S="$icon_padding:5px;"

HEADER_PADDING_C="$header_padding:0;"
HEADER_PADDING_S="$header_padding:4px;"

CHROME_C="@extend %circle_chrome"
CHROME_S="@extend %square_chrome"

NBG_N="background-image: none;" 
NBG_I="@extend %nautilus_backimage;"

# check command avalibility
function has_command() {
  command -v $1 > /dev/null
}

install_package() {
  if [ ! "$(which sassc 2> /dev/null)" ]; then
     echo sassc needs to be installed to generate the css.
     if has_command zypper; then

      sudo zypper in sassc
        elif has_command apt-get; then

      sudo apt-get install sassc
        elif has_command dnf; then

      sudo dnf install sassc
        elif has_command yum; then

      sudo yum install sassc
        elif has_command pacman; then

      sudo pacman -S --noconfirm sassc
      fi
  fi
}

parse_sass() {
  cd ${SRC_DIR} && ./parse-sass.sh
}

install_theme() {
for menu in "${menus[@]:-${MENU_VARIANTS[@]}}"; do
  for color in "${colors[@]:-${COLOR_VARIANTS[@]}}"; do
    install "${dest:-${DEST_DIR}}" "${name:-${THEME_NAME}}" "${menu}" "${color}"
  done
done
}

install_square() {
  cd ${SRC_DIR}/src/_sass
  cp -an _variables.scss _variables.scss.bak
  sed -i "s/$ICON_PADDING_C/$ICON_PADDING_S/g" _variables.scss
  sed -i "s/$HEADER_PADDING_C/$HEADER_PADDING_S/g" _variables.scss

  cd ${SRC_DIR}/src/_sass/gtk
  cp -an _common.scss _common.scss.bak
  sed -i "s/$TITLE_BUTTON_C/$TITLE_BUTTON_S/g" _common.scss
  sed -i "s/$CSD_TITLE_BUTTON_C/$CSD_TITLE_BUTTON_S/g" _common.scss

  cd ${SRC_DIR}/src/_sass/gtk/apps
  cp -an _misc.scss _misc.scss.bak
  sed -i "s/$CHROME_C/$CHROME_S/g" _misc.scss
  echo -e "Specify theme with square titlebuttons ..."
}

restore_square() {
  cd ${SRC_DIR}/src/_sass
  [[ -d _variables.scss.bak ]] && rm -rf _variables.scss
  mv _variables.scss.bak _variables.scss

  cd ${SRC_DIR}/src/_sass/gtk
  [[ -d _common.scss.bak ]] && rm -rf _common.scss
  mv _common.scss.bak _common.scss

  cd ${SRC_DIR}/src/_sass/gtk/apps
  [[ -d _misc.scss.bak ]] && rm -rf _misc.scss
  mv _misc.scss.bak _misc.scss
  echo -e "Restore scss files ..."
}

install_img() {
  cd ${SRC_DIR}/src/_sass/gtk/apps
  cp -an _gnome.scss _gnome.scss.bak
  sed -i "s/$NBG_N/$NBG_I/g" _gnome.scss
  echo -e "Specify theme with nautilus background image ..."
}

restore_img() {
  cd ${SRC_DIR}/src/_sass/gtk/apps
  [[ -d _gnome.scss.bak ]] && rm -rf _gnome.scss
  mv _gnome.scss.bak _gnome.scss
  echo -e "Restore scss files ..."
}

while [[ $# -gt 0 ]]; do
  case "${1}" in
    -d|--dest)
      dest="${2}"
      if [[ ! -d "${dest}" ]]; then
        echo "ERROR: Destination directory does not exist."
        exit 1
      fi
      shift 2
      ;;
    -n|--name)
      name="${2}"
      shift 2
      ;;
    -s|--square)
      square='true'
      shift
      ;;
    -i|--image)
      image='true'
      shift
      ;;
    -m|--menu)
      shift
      for menu in "${@}"; do
        case "${menu}" in
          standard)
            menus+=("${MENU_VARIANTS[0]}")
            shift
            ;;
          gnome)
            menus+=("${MENU_VARIANTS[1]}")
            shift
            ;;
          -*|--*)
            break
            ;;
          *)
            echo "ERROR: Unrecognized thin variant '$1'."
            echo "Try '$0 --help' for more information."
            exit 1
            ;;
        esac
      done
      ;;
    -c|--color)
      shift
      for color in "${@}"; do
        case "${color}" in
          standard)
            colors+=("${COLOR_VARIANTS[0]}")
            shift 1
            ;;
          light)
            colors+=("${COLOR_VARIANTS[1]}")
            shift 1
            ;;
          dark)
            colors+=("${COLOR_VARIANTS[2]}")
            shift 1
            ;;
          -*|--*)
            break
            ;;
          *)
            echo "ERROR: Unrecognized color variant '$1'."
            echo "Try '$0 --help' for more information."
            exit 1
            ;;
        esac
      done
      ;;
    -h|--help)
      usage
      exit 0
      ;;
    *)
      echo "ERROR: Unrecognized installation option '$1'."
      echo "Try '$0 --help' for more information."
      exit 1
      ;;
  esac
done

if [[ "${square:-}" != 'true' && "${image:-}" != 'true' ]]; then
  install_theme
fi

if [[ "${square:-}" == 'true' && "${image:-}" != 'true' ]]; then
  install_package && install_square && parse_sass && install_theme && restore_square && parse_sass
fi

if [[ "${square:-}" != 'true' && "${image:-}" == 'true'  ]]; then
  install_package && install_img && parse_sass && install_theme && restore_img && parse_sass
fi

if [[ "${square:-}" == 'true' && "${image:-}" == 'true' ]]; then
  install_package && install_square && install_img && parse_sass && install_theme && restore_square && restore_img && parse_sass
fi

echo
echo Done.
